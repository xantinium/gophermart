// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (
    number,
    user_id,
    status,
    accrual,
    created,
    updated
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateOrderParams struct {
	Number  string
	UserID  int32
	Status  int16
	Accrual float32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder,
		arg.Number,
		arg.UserID,
		arg.Status,
		arg.Accrual,
		arg.Created,
		arg.Updated,
	)
	return err
}

const getOrderByNumber = `-- name: GetOrderByNumber :one
SELECT id, number, user_id, status, accrual, created, updated FROM orders
WHERE number = $1
`

func (q *Queries) GetOrderByNumber(ctx context.Context, number string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByNumber, number)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.UserID,
		&i.Status,
		&i.Accrual,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getOrdersByLimitAndOffset = `-- name: GetOrdersByLimitAndOffset :many
SELECT id, number, user_id, status, accrual, created, updated FROM orders
WHERE status = ANY ($3)
ORDER BY id ASC
LIMIT $1
OFFSET $2
`

type GetOrdersByLimitAndOffsetParams struct {
	Limit    int32
	Offset   int32
	Statuses []int16
}

func (q *Queries) GetOrdersByLimitAndOffset(ctx context.Context, arg GetOrdersByLimitAndOffsetParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByLimitAndOffset, arg.Limit, arg.Offset, arg.Statuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.UserID,
			&i.Status,
			&i.Accrual,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, number, user_id, status, accrual, created, updated FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.UserID,
			&i.Status,
			&i.Accrual,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAccrualByUserID = `-- name: GetTotalAccrualByUserID :one
SELECT COALESCE(SUM(accrual), 0)::real as total_accrual FROM orders
WHERE user_id = $1 AND status = $2
`

type GetTotalAccrualByUserIDParams struct {
	UserID int32
	Status int16
}

func (q *Queries) GetTotalAccrualByUserID(ctx context.Context, arg GetTotalAccrualByUserIDParams) (float32, error) {
	row := q.db.QueryRow(ctx, getTotalAccrualByUserID, arg.UserID, arg.Status)
	var total_accrual float32
	err := row.Scan(&total_accrual)
	return total_accrual, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET status = $1, accrual = $2, updated = $3
WHERE number = $4
`

type UpdateOrderParams struct {
	Status  int16
	Accrual float32
	Updated pgtype.Timestamp
	Number  string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.Status,
		arg.Accrual,
		arg.Updated,
		arg.Number,
	)
	return err
}
