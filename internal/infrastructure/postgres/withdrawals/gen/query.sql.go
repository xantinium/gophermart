// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWithdrawal = `-- name: CreateWithdrawal :exec
INSERT INTO withdrawals (
    order_id,
    sum,
    user_id,
    created,
    updated
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateWithdrawalParams struct {
	OrderID string
	Sum     float32
	UserID  int32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) CreateWithdrawal(ctx context.Context, arg CreateWithdrawalParams) error {
	_, err := q.db.Exec(ctx, createWithdrawal,
		arg.OrderID,
		arg.Sum,
		arg.UserID,
		arg.Created,
		arg.Updated,
	)
	return err
}

const getTotalWithdrawnByUserID = `-- name: GetTotalWithdrawnByUserID :one
SELECT SUM(sum)::real as total_withdrawn FROM withdrawals
WHERE user_id = $1
`

func (q *Queries) GetTotalWithdrawnByUserID(ctx context.Context, userID int32) (float32, error) {
	row := q.db.QueryRow(ctx, getTotalWithdrawnByUserID, userID)
	var total_withdrawn float32
	err := row.Scan(&total_withdrawn)
	return total_withdrawn, err
}

const getWithdrawalsByUserID = `-- name: GetWithdrawalsByUserID :many
SELECT id, order_id, sum, user_id, created, updated FROM withdrawals
WHERE user_id = $1
`

func (q *Queries) GetWithdrawalsByUserID(ctx context.Context, userID int32) ([]Withdrawal, error) {
	rows, err := q.db.Query(ctx, getWithdrawalsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Withdrawal
	for rows.Next() {
		var i Withdrawal
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sum,
			&i.UserID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
